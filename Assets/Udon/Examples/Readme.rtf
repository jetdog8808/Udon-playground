{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\froman\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fnil\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f6\fnil\fprq2\fcharset0 OpenSymbol{\*\falt Arial Unicode MS};}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033 Normal;}
{\*\cs15\snext15\cf9\ul\ulc0\langfe255\lang255 Internet Link;}
{\*\cs16\snext16\b0\dbch\af6 ListLabel 1;}
{\*\cs17\snext17\dbch\af6 ListLabel 2;}
{\*\cs18\snext18\dbch\af6 ListLabel 3;}
{\*\cs19\snext19\dbch\af6 ListLabel 4;}
{\*\cs20\snext20\dbch\af6 ListLabel 5;}
{\*\cs21\snext21\dbch\af6 ListLabel 6;}
{\*\cs22\snext22\dbch\af6 ListLabel 7;}
{\*\cs23\snext23\dbch\af6 ListLabel 8;}
{\*\cs24\snext24\dbch\af6 ListLabel 9;}
{\*\cs25\snext25\cf9\ul\ulc0\langfe255\lang255 ListLabel 10;}
{\*\cs26\snext26\b0\dbch\af6 ListLabel 11;}
{\*\cs27\snext27\b0\dbch\af6 ListLabel 12;}
{\*\cs28\snext28\dbch\af6 ListLabel 13;}
{\*\cs29\snext29\dbch\af6 ListLabel 14;}
{\*\cs30\snext30\dbch\af6 ListLabel 15;}
{\*\cs31\snext31\dbch\af6 ListLabel 16;}
{\*\cs32\snext32\dbch\af6 ListLabel 17;}
{\*\cs33\snext33\dbch\af6 ListLabel 18;}
{\*\cs34\snext34\dbch\af6 ListLabel 19;}
{\*\cs35\snext35\cf9\ul\ulc0\langfe255\lang255 ListLabel 20;}
{\*\cs36\snext36\cf9\ul\ulc0\langfe255\lang255 ListLabel 21;}
{\*\cs37\snext37\cf9\ul\ulc0\langfe255\lang255 ListLabel 22;}
{\*\cs38\snext38\b0\dbch\af6 ListLabel 23;}
{\*\cs39\snext39\cf9\ul\ulc0\langfe255\lang255 ListLabel 24;}
{\s40\sbasedon0\snext41\ql\nowidctlpar\hyphpar0\sb240\sa120\keepn\ltrpar\cf0\kerning1\dbch\af5\langfe1033\dbch\af5\afs24\loch\f4\fs28\lang1033 Heading;}
{\s41\sbasedon0\snext41\sl276\slmult1\ql\nowidctlpar\hyphpar0\sb0\sa140\ltrpar\cf0\kerning1\dbch\af5\langfe1033\dbch\af5\afs24\loch\f3\fs24\lang1033 Text Body;}
{\s42\sbasedon41\snext42\sl276\slmult1\ql\nowidctlpar\hyphpar0\sb0\sa140\ltrpar\cf0\kerning1\dbch\af5\langfe1033\dbch\af5\afs24\loch\f3\fs24\lang1033 List;}
{\s43\sbasedon0\snext43\ql\nowidctlpar\hyphpar0\sb120\sa120\ltrpar\cf0\i\kerning1\dbch\af5\langfe1033\dbch\af5\afs24\loch\f3\fs24\lang1033 Caption;}
{\s44\sbasedon0\snext44\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1033\dbch\af5\afs24\loch\f3\fs24\lang1033 Index;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f7\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f7\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f7\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f7\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f7\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f7\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f7\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f7\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f7\fi-360\li3600}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\b0\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f7\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f7\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f7\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f7\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f7\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f7\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f7\fi-360\li3600}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f7\fi-360\li3960}\listid2}
{\list\listtemplateid3
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}\listid3}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}{\*\generator LibreOffice/6.1.3.2$Windows_X86_64 LibreOffice_project/86daf60bf00efa86ad547e59e09d6bb77c699acb}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2020\mo3\dy26\hr17\min34}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab709
\hyphauto0\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Udon SDK Simple Examples}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
This directory contains some sample Udon programs in a variety of scenes to get you started.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\b\rtlch \ltrch\loch
SpinningCubeSeries}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
This is the recommended starting point. You can watch the 5 video series made by Tupper on the Udon Forum:}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{{\field{\*\fldinst HYPERLINK "https://ask.vrchat.com/t/spinning-cube-example-series/81" }{\fldrslt {\cf9\ul\ulc0\langfe255\lang255\cf9\ul\ulc0\langfe255\rtlch \ltrch\loch\lang255
https://ask.vrchat.com/t/spinning-cube-example-series/81}}}}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The 5 scenes match the videos so you can play with a working version if you\u8217\'92d like to start that way.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\b\rtlch \ltrch\loch
MultiExample}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__85_3547908706}{\*\bkmkend __DdeLink__85_3547908706}\b0\rtlch \ltrch\loch
This scene contains working versions of a number of core concepts. Run the scene and you\u8217\'92ll be able to explore the following programs:}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\b0\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u8226\'95\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\li720\ri0\lin720\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
On Mouse Down}{\b0\rtlch \ltrch\loch
 cube will switch between 3 materials when you click on it in the editor. Take a look at its two attached UdonBehaviours: }{\b\rtlch \ltrch\loch
SendEventOnMouseDown}{\b0\rtlch \ltrch\loch
 and }{\b\rtlch \ltrch\loch
ChangeMaterialOnEvent}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u8226\'95\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\li720\ri0\lin720\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
Timer}{\b0\rtlch \ltrch\loch
 cube automatically changes between its 3 materials based on a }{\b\rtlch \ltrch\loch
duration}{\b0\rtlch \ltrch\loch
 variable you can change in the inspector before you hit play. It does this with two UdonBehaviours: }{\b\rtlch \ltrch\loch
SendEventOnTimer}{\b0\rtlch \ltrch\loch
 and }{\b\rtlch \ltrch\loch
ChangeMaterialOnEvent }{\b0\rtlch \ltrch\loch
(the same exact script as on the On Mouse Down cube).}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u8226\'95\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\li720\ri0\lin720\rin0\fi-360{\b0\rtlch \ltrch\loch
The Click for Loops cube will change its text to read something like \u8216\'91loops:012345678\u8217\'92. It does this by running a loop X number of times and adding to the UI Text Field. It\u8217\'92s got a }{\b\rtlch \ltrch\loch
SendEventOnMouseDown}{\b0\rtlch \ltrch\loch
 UdonBehaviour just like the first cube, but it points to another component. Click on the }{\b\rtlch \ltrch\loch
target}{\b0\rtlch \ltrch\loch
 public variable on this UdonBehaviour to highlight the Text field that is being changed. Click on this text field and you\u8217\'92ll see a }{\b\rtlch \ltrch\loch
SimpleForLoop}{\b0\rtlch \ltrch\loch
 UdonBehaviour. You can change the }{\i0\b\rtlch \ltrch\loch
numberOfLoops}{\i0\b0\rtlch \ltrch\loch
 variable before running the scene to change the text it creates.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\b0\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\i0\b0\rtlch \ltrch\loch
You\u8217\'92ll need to Build & Test a local version of the scene so it can run in the VRChat Client in order to test the next group:}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u8226\'95\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\li720\ri0\lin720\rin0\fi-360{\b0\rtlch \ltrch\loch
To activate the }{\b\rtlch \ltrch\loch
Station,}{\b0\rtlch \ltrch\loch
 you walk your avatar to the chair object and }{\b\rtlch \ltrch\loch
Interact}{\b0\rtlch \ltrch\loch
 with it (typically your }{\b\rtlch \ltrch\loch
Trigger}{\b0\rtlch \ltrch\loch
 or }{\b\rtlch \ltrch\loch
Left Mouse}{\b0\rtlch \ltrch\loch
 button). This has a very simple }{\b\rtlch \ltrch\loch
UseStationOnInteract}{\b0\rtlch \ltrch\loch
 program that gets the local player object and calls Use Attached Station.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u8226\'95\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\li720\ri0\lin720\rin0\fi-360{\b0\rtlch \ltrch\loch
To swap the materials on the }{\b\rtlch \ltrch\loch
Interact Cube}{\b0\rtlch \ltrch\loch
, walk your avatar to it and }{\b\rtlch \ltrch\loch
Interact}{\b0\rtlch \ltrch\loch
. You may have guessed \u8211\'96 a }{\b\rtlch \ltrch\loch
ChangeMaterialOnEvent}{\b0\rtlch \ltrch\loch
 for the effect, and a }{\b\rtlch \ltrch\loch
SendEventOnInteract}{\b0\rtlch \ltrch\loch
 as a trigger.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u8226\'95\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\li720\ri0\lin720\rin0\fi-360{\b0\rtlch \ltrch\loch
You can also walk over to the }{\b\rtlch \ltrch\loch
On Pickup Cube}{\b0\rtlch \ltrch\loch
 and press your pickup button (typically your }{\b\rtlch \ltrch\loch
Grab}{\b0\rtlch \ltrch\loch
 or }{\b\rtlch \ltrch\loch
Left Mouse}{\b0\rtlch \ltrch\loch
 button). Once your avatar is holding it, you can }{\b\rtlch \ltrch\loch
Interact}{\b0\rtlch \ltrch\loch
 with it to change its color. Take a look at the }{\b\rtlch \ltrch\loch
PickupAndUse}{\b0\rtlch \ltrch\loch
 program on the cube. It changes the color of the material instead of swapping it out entirely.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li720\ri0\lin720\rin0\fi-360\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__143_247066899}\b\rtlch \ltrch\loch
Sync}{{\*\bkmkend __DdeLink__143_247066899}\b\rtlch \ltrch\loch
UI}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li360\ri0\lin360\rin0\fi0{\b0\rtlch \ltrch\loch
This scene shows Sync working within VRChat in a few different ways. You\u8217\'92ll need to Publish this scene as a private world in order to see it in action, and have a friend join you.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
If you create the world, you will be the master, and you will have control over the }{\b\rtlch \ltrch\loch
UIButton Master}{\b0\rtlch \ltrch\loch
 on the left. Every time you Interact with this button, its counter will increase for everyone in the room. Only you can push this button, unless you leave the room \u8211\'96 which turns someone else into the master. Take a look at the button in the hierarchy under Canvas/Panel/ButtonSyncMaster. Its OnClick event has been wired to the attached UdonBehaviour to fire the Interact event. This doesn\u8217\'92t happen automatically, you have to wire it up yourself. Next, take a look at the Udon Graph to see how the }{\b\rtlch \ltrch\loch
clickCount}{\b0\rtlch \ltrch\loch
 is stored on the object and set every frame on LateUpdate. This is not a very performant way to set the text, but it is simple.}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
UIButton Anyone}{\b0\rtlch \ltrch\loch
 on the right can be pushed by anyone in the room! Upon interaction, that user becomes the owner of the button, which lets their instance become the source of truth for how many button clicks should be displayed. Take a look at the Udon Graph on this object to see how everything works. This graph does three things in a specific order:}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u9702\'3f\tab}\ilvl1\ls2 \li2880\ri0\lin2880\rin0\fi-360\li1440\ri0\lin1440\rin0\fi-360{\b0\rtlch \ltrch\loch
When the }{\b\rtlch \ltrch\loch
Interact}{\b0\rtlch \ltrch\loch
 event fires, it sets the Owner of the Button to the local player \u8211\'96 the one who triggered this event.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u9702\'3f\tab}\ilvl1\ls2 \li2880\ri0\lin2880\rin0\fi-360\li1440\ri0\lin1440\rin0\fi-360{\b0\rtlch \ltrch\loch
After the owner is set, it can set the }{\b\rtlch \ltrch\loch
clickCount}{\b0\rtlch \ltrch\loch
 variable. There is a known bug where this doesn\u8217\'92t work right away, so a new Owner will only have their clicks counted starting on the second click. This will be fixed soon.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain  \u9702\'3f\tab}\ilvl1\ls2 \li2880\ri0\lin2880\rin0\fi-360\li1440\ri0\lin1440\rin0\fi-360{\b0\rtlch \ltrch\loch
Finally, on lateUpdate, the Button\u8217\'92s }{\b\rtlch \ltrch\loch
uiText}{\b0\rtlch \ltrch\loch
 label is updated with the new count. This will happen for each player whether or not they are the owner of the object.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li1080\ri0\lin1080\rin0\fi0{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
UISlider}{\b0\rtlch \ltrch\loch
 can be controlled by master \u8211\'96 just aim and interact to change the value and it will sync its value to the other players in the room. This Udon Graph is very similar to the }{\b\rtlch \ltrch\loch
UIButton Master}{\b0\rtlch \ltrch\loch
 and the rest of the UI examples in the scene. It uses public variables to wire up the UI and listens to the slider\u8217\'92s }{\b\rtlch \ltrch\loch
OnValueChanged}{\b0\rtlch \ltrch\loch
 to fires the }{\b\rtlch \ltrch\loch
Interact}{\b0\rtlch \ltrch\loch
 event. This prompts the graph to save the current value of the slider to a synced variable, which is picked up by the other players on Update. It also updates its own text readout using this value.}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
UIToggle}{\b0\rtlch \ltrch\loch
 is one of the simplest examples, following our familiar formula \u8211\'96 fire }{\b\rtlch \ltrch\loch
Interact}{\b0\rtlch \ltrch\loch
 on a UI }{\b\rtlch \ltrch\loch
OnValueChanged}{\b0\rtlch \ltrch\loch
 event, update a synced variable, and update its own state from the synced variable.}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
UIDropdown}{\b0\rtlch \ltrch\loch
 works the same way as the above UI elements.}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
UITextField}{\b0\rtlch \ltrch\loch
 works very similar to the above elements. Note that you have the choice between subscribing to }{\b\rtlch \ltrch\loch
OnValueChanged}{\b0\rtlch \ltrch\loch
 or }{\b\rtlch \ltrch\loch
OnEndEdit}{\b0\rtlch \ltrch\loch
. This example uses }{\b\rtlch \ltrch\loch
OnValueChanged}{\b0\rtlch \ltrch\loch
 to send updates more frequently, the other option would wait until an \u8216\'91enter\u8217\'92 command is made.}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
PickupCube}{\b0\rtlch \ltrch\loch
 on the left can be picked up by anyone in the room. Once it is picked up, it will change its color, and that new color will be synced to everyone else in the room. Take a look inside the attached UdonProgram, and notice that the Color data is synced using }{\b\rtlch \ltrch\loch
smooth}{\b0\rtlch \ltrch\loch
 interpolation. This helps smooth out the data over the network. Try the other modes and see what changes. This program uses an }{\b\rtlch \ltrch\loch
Update}{\b0\rtlch \ltrch\loch
 event to run on every frame \u8211\'96 but the first thing it does in the }{\b\rtlch \ltrch\loch
Block }{\b0\rtlch \ltrch\loch
node is check whether this player is both the }{\b\rtlch \ltrch\loch
Owner}{\b0\rtlch \ltrch\loch
 of the object and whether the object }{\b\rtlch \ltrch\loch
Is Held}{\b0\rtlch \ltrch\loch
. If either of these are false, the }{\b\rtlch \ltrch\loch
Branch}{\b0\rtlch \ltrch\loch
 after the }{\b\rtlch \ltrch\loch
Op Conditional And}{\b0\rtlch \ltrch\loch
 node will be false, and that will end this flow, skipping to the second flow of the }{\b\rtlch \ltrch\loch
Block}{\b0\rtlch \ltrch\loch
 statement, which sets the color of the material for every player.}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \b0\dbch\af6 \u8226\'95\tab}\ilvl0\ls2 \li2160\ri0\lin2160\rin0\fi-360\li1080\ri0\lin1080\rin0\fi-360{\b0\rtlch \ltrch\loch
The }{\b\rtlch \ltrch\loch
PickupSphere}{\b0\rtlch \ltrch\loch
 on the right can also be picked up by anyone. Its UdonBehaviour is empty! Instead of containing a program, it provides sync and ownership abilities just by using the checkboxes on the UdonBehaviour.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li1080\ri0\lin1080\rin0\fi-360\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li1080\ri0\lin1080\rin0\fi-360{\b\rtlch \ltrch\loch
SyncValueTypes}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li1080\ri0\lin1080\rin0\fi-360\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li720\ri0\lin720\rin0\fi0{\b0\rtlch \ltrch\loch
This scene serves as a testing area for a variety of basic types, with a barebones visualization of each one syncing in the scene, and how each type responds to the different sync styles of \u8216\'91Linear\u8217\'92 and \u8216\'91Smooth\u8217\'92.}
\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li720\ri0\lin720\rin0\fi0\rtlch \ltrch\loch

\par \pard\plain \s0\ql\nowidctlpar\hyphpar0\ltrpar\cf0\kerning1\dbch\af5\langfe1081\dbch\af5\afs24\alang1081\loch\f3\fs24\lang1033\li720\ri0\lin720\rin0\fi0{\b0\rtlch \ltrch\loch
The Gameobjects }{\b\rtlch \ltrch\loch
ValueStore}{\b0\rtlch \ltrch\loch
, }{\b\rtlch \ltrch\loch
ValueStoreLinear}{\b0\rtlch \ltrch\loch
 and }{\b\rtlch \ltrch\loch
ValueStoreSmooth}{\b0\rtlch \ltrch\loch
 contain almost identical UdonGraphs, with their sync types for each variable the only difference. They all have a public variable for the }{\b\rtlch \ltrch\loch
UITextField}{\b0\rtlch \ltrch\loch
 that they use to show their values, which are randomly generated, synced, and then turned into a single string for display. Note that there is }{\b0\rtlch \ltrch\loch
a known issue where integers don\u8217\'92t sync correctly using the Linear or Smooth syncTypes, and floats don\u8217\'92t sync right using Smooth. Once those issues are fixed, you\u8217\'92ll be able to see them work just like the others.}
\par }